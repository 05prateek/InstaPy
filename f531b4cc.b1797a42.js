(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{68:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));var s=t(2),r=t(6),a=(t(0),t(72)),o={title:"Instance Settings"},i={unversionedId:"instance-settings",id:"instance-settings",isDocsHomePage:!1,title:"Instance Settings",description:"Running on a Headless Browser",source:"@site/../docs/instance-settings.md",slug:"/instance-settings",permalink:"/instance-settings",editUrl:"https://github.com/timgrossmann/InstaPy/edit/master/website/../docs/instance-settings.md",version:"current",sidebar:"docs",previous:{title:"Third Party Features",permalink:"/third-party-features"},next:{title:"Relationship Tools",permalink:"/relationship-tools"}},c=[{value:"Running on a Headless Browser",id:"running-on-a-headless-browser",children:[]},{value:"Bypass Suspicious Login Attempt",id:"bypass-suspicious-login-attempt",children:[]},{value:"Use a proxy",id:"use-a-proxy",children:[]},{value:"Running internet connection checks",id:"running-internet-connection-checks",children:[]},{value:"Running in threads",id:"running-in-threads",children:[]},{value:"Choose the browser version",id:"choose-the-browser-version",children:[]}],l={rightToc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(s.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"running-on-a-headless-browser"},"Running on a Headless Browser"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"headless_browser")," parameter to run the bot via the CLI. Works great if running the scripts locally, or to deploy on a server. No GUI, less CPU intensive. ",Object(a.b)("a",Object(s.a)({parentName:"p"},{href:"http://g.recordit.co/BhEgXANLhJ.gif"}),"Example")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Warning:")," Some users discourage the use of this feature as Instagram could ",Object(a.b)("a",Object(s.a)({parentName:"p"},{href:"https://antoinevastel.com/bot%20detection/2017/08/05/detect-chrome-headless.html"}),"detect")," this headless mode!"),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-python"}),"session = InstaPy(username='test', password='test', headless_browser=True)\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"(Alternative)"),"\nIf the web driver you're using doesn't support headless mode (or the headless mode becomes very detectable), you can use the ",Object(a.b)("inlineCode",{parentName:"p"},"nogui")," parameter which displays the window out of view. Keep in mind, this parameter lacks support and ease of use, only supporting Linux based operating systems (or those that have Xvfb, Xephyr and Xvnc display software)."),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-python"}),"session = InstaPy(username='test', password='test', nogui=True)\n")),Object(a.b)("h3",{id:"bypass-suspicious-login-attempt"},"Bypass Suspicious Login Attempt"),Object(a.b)("p",null,"InstaPy detects automatically if the Security Code Challenge\nis active, if yes, it will ask you for the Security Code on\nthe terminal."),Object(a.b)("p",null,"The Security Code is send to your Email or SMS by Instagram, Email is the defaul option, but you can choose SMS also with:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"bypass_security_challenge_using='sms'")," or ",Object(a.b)("inlineCode",{parentName:"p"},"bypass_security_challenge_using='email'")),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-python"}),"InstaPy(username=insta_username,\n        password=insta_password,\n        bypass_security_challenge_using='sms')\n")),Object(a.b)("h3",{id:"use-a-proxy"},"Use a proxy"),Object(a.b)("p",null,"You can use InstaPy behind a proxy by specifying server address, port and/or proxy authentication credentials. It works with and without ",Object(a.b)("inlineCode",{parentName:"p"},"headless_browser")," option."),Object(a.b)("p",null,"Simple proxy setup example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-python"}),"session = InstaPy(username=insta_username,\n                  password=insta_password,\n          proxy_address='8.8.8.8',\n          proxy_port=8080)\n\n")),Object(a.b)("p",null,"Proxy setup with authentication example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-python"}),"session = InstaPy(username=insta_username,\n                  password=insta_password,\n                  proxy_username='',\n                  proxy_password='',\n                  proxy_address='8.8.8.8',\n                  proxy_port=4444)\n")),Object(a.b)("h3",{id:"running-internet-connection-checks"},"Running internet connection checks"),Object(a.b)("p",null,"InstaPy can perform a few checks online, including you connection and the availability of Instagram servers. These checks sometimes fail because Instapy uses third party services to perform these checks. If this should be the case. you can override these checks with this variable: ",Object(a.b)("inlineCode",{parentName:"p"},"want_check_browser"),"."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"want_check_browser")," default is False, you can set it to True at session start. Recommend to do this if you want to add additional checks for the connection to the web and Instagram."),Object(a.b)("p",null,"example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-python"}),"session = InstaPy(username=insta_username,\n                  password=insta_password,\n                  want_check_browser=True)\n")),Object(a.b)("h3",{id:"running-in-threads"},"Running in threads"),Object(a.b)("p",null,"If you're running InstaPy in threads and get exception ",Object(a.b)("inlineCode",{parentName:"p"},"ValueError: signal only works in main thread")," , you have to properly close the session.\nThere is two ways to do it:"),Object(a.b)("p",null,"Closing session in smart_run context:"),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-python"}),'session = InstaPy()\nwith smart_run(session, threaded=True):\n    """ Activity flow """\n    # some activity here ...\n')),Object(a.b)("p",null,"Closing session with ",Object(a.b)("inlineCode",{parentName:"p"},"end()")," method"),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-python"}),"session = InstaPy()\nsession.login()\n# some activity here ...\nsession.end(threaded_session=True)\n")),Object(a.b)("h3",{id:"choose-the-browser-version"},"Choose the browser version"),Object(a.b)("p",null,"If you have more than one Firefox version on your system or if you are using a portable version you can instruct InstaPy to use that version using the ",Object(a.b)("inlineCode",{parentName:"p"},"browser_executable_path")," argument in the class initializer."),Object(a.b)("p",null,"Specifying the Firefox executable path can also help you if you are getting the following error message:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"selenium.common.exceptions.SessionNotCreatedException: Message: Unable to find a matching set of capabilities")),Object(a.b)("p",null,"example on a Windows machine (with the right path also works on Linux and MAC)"),Object(a.b)("pre",null,Object(a.b)("code",Object(s.a)({parentName:"pre"},{className:"language-python"}),'session = InstaPy(username=insta_username,\n                  password=insta_password,\n                  browser_executable_path=r"D:\\Program Files\\Mozilla Firefox\\firefox.exe")\n')))}p.isMDXComponent=!0},72:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return h}));var s=t(0),r=t.n(s);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),d=s,h=u["".concat(o,".").concat(d)]||u[d]||b[d]||a;return t?r.a.createElement(h,i(i({ref:n},l),{},{components:t})):r.a.createElement(h,i({ref:n},l))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);